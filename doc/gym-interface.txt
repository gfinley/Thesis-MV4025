-------------------------
Gym Interface Description
-------------------------

Normal operation of server
--------------------------

Normally the server starts, creates AIs and a gameserver, and hands over control to the gameserver.

The gameserver in turn creates a messageserver and a custom message handling callback and turns over control to the messageserver.

The messageserver runs an event handling loop that enables it to service incoming websocket connections and a set of functions as client message (JSON string) handlers, monitoring all channels, and waking up and processing a message from any client when one appears.


Operation in support of Gym interface
-------------------------------------

The gym interface requires two significant functions: reset and step.

A Gym reset is currently implemented by recreating the gameserver, messageserver, and AIs. This is fine, but not to be confused with a "reset" during normal operation, which is requested by a client, and is handled independently.

A Gym step must take an Gym-format action as an argument (e.g. an integer that indexes into a list of possible actions) and must result in an (observation, reward, dones, infos) tuple. This creates two issues for the system: firstly, actions can only come from an AI, so the selected action must be reformatted and communicated to an AI to be passed through to the server. Secondly, the AI can only insert an action when it is on move, so after each action is taken (and when the system is initialized), the state of the system must be advanced up to the point where it is appropriate for the AI to take another action. This might involve multiple actions taken by other AIs.


Implementation details
----------------------

messageserver.py
----------------
Provides clients with a response_fn (maps to ClientWrapper.send_to_server) that can add messages to a client's outbox on the server. 

server.py
---------
Defines globals game, server (gameserver) and gym_ai (defined in gym_ai_surrogate.py) that enable gym compatibility.
  
mapDimensionsBackdoor(): needed to build a neural net with appropriate architecture

getGymAI(): grants access to AI object as defined in gym_ai_surrogate.py. Used multiple places, listed below.

addMessageRunLoop(): when the gym AI surrogate is asked for an action, it requests a stop to the event loop via a gym-pause message. When the external AI makes an action choice, it is passed to the gameserver via method sendToServer provided by the gym surrogate AI that makes use of the response_fn described above to pass it to the server.

gym_interface.py:
   server.py uses getGymAI() to access this object to...
   ...use AI.observation() to provide observation to external AI
   ...use AI.actionMessageDiscrete(action) to convert external AI's action choice (in Gym format, usually as an integer) to an action message in the format needed for the game
   ...use AI.action_result to return the results of an action in Gym format (observation, reward, done, infos) 